// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
//import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.DriveTrain;
import com.analog.adis16470.frc.ADIS16470_IMU;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrainBalance extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final DriveTrain m_driveTrain;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private ADIS16470_IMU m_IMU;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    private boolean isBalanced=false;


    public DriveTrainBalance(DriveTrain subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_driveTrain = subsystem;
        addRequirements(m_driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        m_IMU = m_driveTrain.getIMU();
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        m_IMU.getXFilteredAccelAngle();
     
        isBalanced=false;
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        double tilt = m_IMU.getXComplementaryAngle(); //this seems to be what we need but, this will be impacted by acceloration of the robot so we should move slow
                                                      // relate posts: https://www.chiefdelphi.com/t/analog-devices-adis-16470-eng-basic-java-gyro-code-help/422553/17
                                                      // potential replacement code for th IMU, but does not implement gyro so suld need to be adapted to simply plug in as gyro
                                                      //   https://github.com/Greater-Rochester-Robotics/SwerveBase2023/blob/main/src/main/java/frc/robot/subsystems/ADIS16470_IMU.java
                                                      //   described: https://www.chiefdelphi.com/t/reading-the-pitch-rate-of-the-16470-imu/425010/6
        //
        double percentOfMaxTilt = tilt/5; // tilt should maximum be 34 Degrees
         SmartDashboard.putNumber("DriveTrainBalance Tilt", tilt);

        //double max_speedFtSec = 0.02; //ft/sec
        //double max_speedMeterSec = max_speedFtSec/3.28;
        //double desired_speed = percentOfMaxTilt * max_speedMeterSec;

        /*double forwardPower = 
        //overcome friction
        Constants.DriveTrainConstants.ksVolts * desired_speed +
        // actual power needed to move
        Constants.DriveTrainConstants.kvVoltSecondsPerMeter * desired_speed;
        */
        double minPower=0.31;
       //double maxPower=0.45;
        double forwardPower;
        // if tilt is greater than 5 then set motors to minPower.
        if(Math.abs(tilt)<6){
            forwardPower=0;
            isBalanced=true;
        }
        else{
            forwardPower= percentOfMaxTilt/Math.abs(percentOfMaxTilt)*minPower;  
        }
        // check if forward power is greater than the max power then set the forward power to the max power.


        double turnPower = 0; //MAY DO if not going straight Up then add some control on turn power.
        
        m_driveTrain.arcadeDrive(
            forwardPower /*power*/,
            turnPower /*turnpower*/
        );
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return isBalanced;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
